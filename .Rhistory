description = character(),
latitude = numeric(),
longitude = numeric(),
altitude = numeric(),
radius = numeric(),
location = character(),
timestamp = character(),
dt = character(),
project_name = character(),
username = character(),
manual_upload = character(),
event_name = character(),
id = character(),
log_index = numeric(),
legend = character()
)
for (i in 1:nrow(litter_df)) {
center_lat <- litter_df$latitude[i]
center_lon <- litter_df$longitude[i]
# generate points from 1 to 20, change the num to change the range
num_points <- sample(1:20, 1)
for (j in 1:num_points) {
new_lat <- center_lat + runif(1, -0.0045, 0.0045)
new_lon <- center_lon + runif(1, -0.0045, 0.0045)
new_row <- litter_df[i, ]
new_row$latitude <- new_lat
new_row$longitude <- new_lon
new_row$legend <- 'allrandom'
populated_points_df <- rbind(populated_points_df, new_row)
}
}
return(populated_points_df)
}
# test
allrandom_points_df <- generate_populated_points(litter)
allrandom_points_df <- allrandom_points_df%>%
st_as_sf(coords = c("longitude", "latitude"), crs = 4326, agr = "constant")%>%
st_transform('EPSG:32643')
litter_net_new <-
dplyr::select(allrandom_points_df) %>%
mutate(countlitter = 1) %>%
aggregate(., fishnet, sum) %>%
mutate(countlitter = replace_na(countlitter, 0),
uniqueID = 1:n(),
cvID = sample(round(nrow(fishnet) / 24),
size=nrow(fishnet), replace = TRUE))
ggplot() +
geom_sf(data = litter_net_new, aes(fill = countlitter), color = NA) +
scale_fill_viridis() +
labs(title = "Count of Litter for the fishnet") +
mapTheme()
final_net_new <-
left_join(litter_net_new, st_drop_geometry(rest_net_temp), by="uniqueID")
final_net_new <-
left_join(final_net_new, st_drop_geometry(tran_net_temp), by="uniqueID")
final_net_new <-
left_join(final_net_new, st_drop_geometry(water_net_temp), by="uniqueID")%>%
rename(rst_nn = item.nn.x,
road_nn = item.nn.y,
wtr_nn = item.nn)
local_morans_rst_n <- localmoran(final_net_new$restaurant, final_net.weights, zero.policy=TRUE) %>%
as.data.frame()
local_morans_road_n <- localmoran(final_net_new$road, final_net.weights, zero.policy=TRUE) %>%
as.data.frame()
local_morans_wtr_n <- localmoran(final_net_new$water, final_net.weights, zero.policy=TRUE) %>%
as.data.frame()
final_net_new <- final_net_new %>%
mutate(rstrt.isSig =
ifelse(local_morans_rst_n[,5] <= 0.001, 1, 0)) %>%
mutate(rstrt.isSig.dist =
nn_function(st_c(st_coid(final_net_new)),
st_c(st_coid(filter(final_net_new,
rstrt.isSig == 1))),
k = 1))
final_net_new <- final_net_new %>%
mutate(road.isSig =
ifelse(local_morans_road_n[,5] <= 0.001, 1, 0)) %>%
mutate(road.isSig.dist =
nn_function(st_c(st_coid(final_net_new)),
st_c(st_coid(filter(final_net_new,
road.isSig == 1))),
k = 1))
final_net_new <- final_net_new %>%
mutate(wtr.isSig =
ifelse(local_morans_wtr_n[,5] <= 0.001, 1, 0)) %>%
mutate(wtr.isSig.dist =
nn_function(st_c(st_coid(final_net_new)),
st_c(st_coid(filter(final_net_new,
wtr.isSig == 1))),
k = 1))
reg.ss.vars <- c("rst_nn", "rstrt.isSig.dist","road_nn", "road.isSig.dist","wtr_nn", "wtr.isSig.dist")
## RUN REGRESSIONS
reg.ss.spatialCV_new <- crossValidate(
dataset = final_net_new,
id = "uniqueID",
dependentVariable = "countlitter",
indVariables = reg.ss.vars) %>%
dplyr::select(uniqueID, countlitter, Prediction, geometry)
error_by_reg_and_fold_new <-
reg.ss.spatialCV_new %>%
group_by(uniqueID) %>%
summarize(Mean_Error = mean(Prediction - countlitter, na.rm = T),
MAE = mean(abs(Mean_Error), na.rm = T),
SD_MAE = mean(abs(Mean_Error), na.rm = T)) %>%
ungroup()
error_by_reg_and_fold_new %>%
arrange(desc(MAE))
error_by_reg_and_fold_new %>%
arrange(MAE)
error_by_reg_and_fold_new %>%
ggplot(aes(MAE)) +
geom_histogram(bins = 30, colour="black", fill = "#FDE725FF") +
scale_x_continuous(breaks = seq(0, 11, by = 1)) +
labs(title="Distribution of MAE", subtitle = "LOGO-CV",
x="Mean Absolute Error", y="Count")
ml_breaks_new <- classIntervals(reg.ss.spatialCV_new$Prediction,
n = 5, "fisher")
litter_risk_sf_new <-
reg.ss.spatialCV_new %>%
mutate(label = "Risk Predictions",
Risk_Category =classInt::findCols(ml_breaks_new),
Risk_Category = case_when(
Risk_Category == 5 ~ "5th",
Risk_Category == 4 ~ "4th",
Risk_Category == 3 ~ "3rd",
Risk_Category == 2 ~ "2nd",
Risk_Category == 1 ~ "1st")) %>%
cbind(
aggregate(
dplyr::select(allrandom_points_df) %>% mutate(litterCount = 1), ., sum) %>%
mutate(litterCount = replace_na(litterCount, 0))) %>%
dplyr::select(label,Risk_Category, litterCount)
ggplot() +
geom_sf(data = litter_risk_sf_new, aes(fill = Risk_Category), colour = NA) +
geom_sf(data = allrandom_points_df, size = .01,alpha = 0.01, colour = "red") +
scale_fill_viridis(discrete = TRUE) +
labs(title="Litter Risk Predictions, Chennai",
subtitle="") +
mapTheme(title_size = 14)
buildRFModel <- function(dataset, dependentVariable, indVariables,
testFraction = 0.2, ntree = 500, mtry = NULL, nodesize = 1) {
# Split dataset into training and testing sets
set.seed(123) # For reproducibility
total_rows <- nrow(dataset)
test_rows <- sample(1:total_rows, size = floor(total_rows * testFraction))
train_set <- dataset[-test_rows, ]
test_set <- dataset[test_rows, ]
# Fit Random Forest model
rfModel <- randomForest(x = train_set[indVariables],
y = train_set[[dependentVariable]],
ntree = ntree,
mtry = mtry,
nodesize = nodesize)
# Make predictions on the test set
predictions <- predict(rfModel, newdata = test_set[indVariables])
# Evaluate model performance
actual <- test_set[[dependentVariable]]
# Example of a simple evaluation metric: Mean Squared Error (MSE)
mse <- mean((predictions - actual) ^ 2)
cat("Model MSE:", mse, "\n")
return(list(model = rfModel, mse = mse))
}
reg.ss.vars <- c("rst_nn", "rstrt.isSig.dist","road_nn", "road.isSig.dist","wtr_nn", "wtr.isSig.dist")
## RUN REGRESSIONS
reg.ss.spatialCV_new <- rf_cv(
dataset = final_net_new,
id = "uniqueID",
dependentVariable = "countlitter",
indVariables = reg.ss.vars) %>%
dplyr::select(uniqueID, countlitter, Prediction, geometry)
grid.arrange(
ggplot() +
geom_sf(data = chen_bdry) +
geom_sf(data = litter_p, colour="red", size=0.2, show.legend = "point") +
geom_sf(data = litter_p%>%filter(username == 'Chandranram'), colour="green", size=0.2, show.legend = "point") +
mapTheme(title_size = 14),
nrow = 1
)
countfishnet <- function(fishnet,dataset){
net <-
dplyr::select(dataset) %>%
mutate(count = 1) %>%
aggregate(., fishnet, sum) %>%
mutate(count = replace_na(count, 0),
uniqueID = 1:n(),
cvID = sample(round(nrow(fishnet) / 24),
size=nrow(fishnet), replace = TRUE))
return(net)
}
knnfishnet <- function(fishnet,dataset,knum){
vars_net <- dataset%>%
st_join(fishnet, join=st_within) %>%
st_drop_geometry() %>%
group_by(uniqueID,osm_id) %>%
summarize(count = n()) %>%
left_join(fishnet, ., by = "uniqueID") %>%
spread(osm_id, count, fill=0) %>%
dplyr::select(-`<NA>`) %>%
ungroup()
vars_net <- vars_net %>%
mutate(item.nn = nn_function(st_c(st_coid(vars_net)),
st_c(dataset),
k = knum))
return(vars_net)
}
visual <- function(net_one,point_one,variable_name){
grid.arrange(
ggplot() +
geom_sf(data = net_one, aes(fill = count), color = NA) +
scale_fill_viridis() +
labs(title = paste(variable_name,"count for the fishnet")) +
mapTheme(),
ggplot() +
geom_sf(data = chen_bdry) +
geom_sf(data = point_one, colour="red", size=0.2, show.legend = "point") +
labs(title= paste(variable_name,", Chennai")) +
mapTheme(title_size = 14),
nrow = 1
)
}
litter <- read.csv('https://raw.githubusercontent.com/TrevorKap/MUSA810-Marine-Pollution/main/Data/mdt-dataChennai.csv')
litter_p <- litter%>%
filter(master_material == 'PLASTIC')%>%
st_as_sf(coords = c("longitude", "latitude"), crs = 4326, agr = "constant")%>%
st_transform('EPSG:32643')
chen_bdry <- st_read('https://raw.githubusercontent.com/TrevorKap/MUSA810-Marine-Pollution/main/Data/gcc-divisions-latest.kml')
chen_bdry <- st_set_crs(chen_bdry, 4326)%>%
st_transform('EPSG:32643')
fishnet <-
st_make_grid(chen_bdry,
cellsize = 500,
square = TRUE) %>%
.[chen_bdry] %>%
st_sf() %>%
mutate(uniqueID = 1:n())
litter_people <- litter_p%>%
group_by(username)%>%
tally()
grid.arrange(
ggplot() +
geom_sf(data = chen_bdry) +
geom_sf(data = litter_p, colour="red", size=0.2, show.legend = "point") +
geom_sf(data = litter_p%>%filter(username == 'Chandranram'), colour="green", size=0.2, show.legend = "point") +
mapTheme(title_size = 14),
nrow = 1
)
buildRFModel <- function(dataset, dependentVariable, indVariables,
testFraction = 0.2, ntree = 500, mtry = NULL, nodesize = 1) {
# Split dataset into training and testing sets
set.seed(123) # For reproducibility
total_rows <- nrow(dataset)
test_rows <- sample(1:total_rows, size = floor(total_rows * testFraction))
train_set <- dataset[-test_rows, ]
test_set <- dataset[test_rows, ]
# Fit Random Forest model
rfModel <- randomForest(x = train_set[indVariables],
y = train_set[[dependentVariable]],
ntree = ntree,
mtry = mtry,
nodesize = nodesize)
# Make predictions on the test set
predictions <- predict(rfModel, newdata = test_set[indVariables])
# Evaluate model performance
actual <- test_set[[dependentVariable]]
# Example of a simple evaluation metric: Mean Squared Error (MSE)
mse <- mean((predictions - actual) ^ 2)
cat("Model MSE:", mse, "\n")
return(list(model = rfModel, mse = mse))
}
chen_bd <- c(80.4301860, 13.2436939, 80.1101860, 12.8236939)
chen_sub_bd <- c(80.4301860, 13.1536939, 80.2601860, 12.9136939)
coordinates <- matrix(c(80.2601860, 12.9136939,  # Point 1
-74.0060, 40.7528,  # Point 2
-73.9860, 40.7528,  # Point 3
-73.9860, 40.7128,  # Point 4
-74.0060, 40.7128), # Closing point to complete the polygon (same as Point 1)
ncol = 2, byrow = TRUE)
# Create a POLYGON geometry
polygon_geometry <- st_polygon(list(coordinates))
fishnet_new <-
st_make_grid(chen_bdry,
cellsize = 500,
square = TRUE) %>%
.[chen_bdry] %>%
st_sf() %>%
mutate(uniqueID = 1:n())
litter_net_new <-
dplyr::select(litter_p) %>%
mutate(countlitter = 1) %>%
aggregate(., fishnet_new, sum) %>%
mutate(countlitter = replace_na(countlitter, 0),
uniqueID = 1:n(),
cvID = sample(round(nrow(fishnet) / 24),
size=nrow(fishnet), replace = TRUE))
ggplot() +
geom_sf(data = litter_net_new, aes(fill = countlitter), color = NA) +
scale_fill_viridis() +
labs(title = "Count of Litter for the fishnet") +
mapTheme()
grid.arrange(
ggplot() +
geom_sf(data = chen_bdry) +
geom_sf(data = litter_p, colour="red", size=0.2, aes(fill = litter_p)) +
geom_sf(data = litter_p%>%filter(username == 'Chandranram'), colour="green", size=0.2, aes(fill = litter_p) +
mapTheme(title_size = 14),
nrow = 1
)
grid.arrange(
ggplot() +
geom_sf(data = chen_bdry) +
geom_sf(data = litter_p, colour="red", size=0.2, aes(fill = data)) +
geom_sf(data = litter_p%>%filter(username == 'Chandranram'), colour="green", size=0.2, show.legend = "point") +
mapTheme(title_size = 14),
nrow = 1
)
grid.arrange(
ggplot() +
geom_sf(data = chen_bdry) +
geom_sf(data = litter_p, colour="red", size=0.2, show.legend = "point") +
geom_sf(data = litter_p%>%filter(username == 'Chandranram'), colour="green", size=0.2, show.legend = "point") +
mapTheme(title_size = 14),
nrow = 1
)
grid.arrange(
ggplot() +
geom_sf(data = chen_bdry) +
geom_sf(data = litter_p, colour="red", size=0.2, show.legend = "point") +
geom_sf(data = litter_p%>%filter(username == 'Chandranram'), colour="green", size=0.2, show.legend = "point") +
mapTheme(title_size = 14),
nrow = 1
)
grid.arrange(
ggplot() +
geom_sf(data = chen_bdry) +
geom_sf(data = litter_p, colour="red", size=0.2, show.legend = "point") +
geom_sf(data = litter_p%>%filter(username == 'Chandranram'), colour="green", size=0.2, show.legend = "point") +
mapTheme(title_size = 14),
nrow = 1
)
grid.arrange(
ggplot() +
geom_sf(data = chen_bdry) +
geom_sf(data = litter_p, colour="red", size=0.2, show.legend = "point") +
# geom_sf(data = litter_p%>%filter(username == 'Chandranram'), colour="green", size=0.2, show.legend = "point") +
mapTheme(title_size = 14),
nrow = 1
)
grid.arrange(
ggplot(litter_p, aes(x = quantity)) +
geom_bar() +
theme_minimal() +
labs(title = "Count of Quantity Per Record",
x = "Category",
y = "Count"),
ggplot(litter_p, aes(x = altitude)) +
geom_histogram() +
theme_minimal() +
labs(title = "Altitude Histogram",
x = "Category",
y = "Count"),
ggplot(litter_p, aes(x = radius)) +
geom_histogram() +
theme_minimal() +
labs(title = "Radius Histogram",
x = "Category",
y = "Count"),
ncol = 3
)
ggplot(litter_p, aes(x = master_item_name)) +
geom_bar() +
theme_minimal() +
labs(title = "Count of Main Item Category",
x = "Category",
y = "Count")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(litter_p, aes(x = location)) +
geom_bar() +
theme_minimal() +
labs(title = "Count of Location in Litter Record",
x = "Category",
y = "Count")+
theme(axis.text.x = element_text(angle = 25,size = 6))
litter_net <-
dplyr::select(litter_p) %>%
mutate(countlitter = 1) %>%
aggregate(., fishnet, sum) %>%
mutate(countlitter = replace_na(countlitter, 0),
uniqueID = 1:n(),
cvID = sample(round(nrow(fishnet) / 24),
size=nrow(fishnet), replace = TRUE))
ggplot() +
geom_sf(data = litter_net, aes(fill = countlitter), color = NA) +
scale_fill_viridis() +
labs(title = "Count of Litter for the fishnet") +
mapTheme()
litter_net <-
dplyr::select(litter_p) %>%
mutate(countlitter = 1) %>%
aggregate(., fishnet, sum) %>%
mutate(countlitter = replace_na(countlitter, 0),
uniqueID = 1:n(),
cvID = sample(round(nrow(fishnet) / 24),
size=nrow(fishnet), replace = TRUE))
ggplot() +
geom_sf(data = litter_net, aes(fill = countlitter), color = NA) +
scale_fill_viridis() +
labs(title = "Count of Litter for the fishnet") +
mapTheme()
visual(road_net,trans_point,'residential road')
litter_no <- st_drop_geometry(litter_net)%>%dplyr::select(countlitter, uniqueID)
corr_trans_net <- road_net %>%
left_join(litter_no, by = "uniqueID")
print(chisq.test(corr_trans_net$count,corr_trans_net$countlitter))
litter_no <- st_drop_geometry(litter_net)%>%dplyr::select(countlitter, uniqueID)
corr_trans_net <- road_net %>%
left_join(litter_no, by = "uniqueID")
print(chisq.test(corr_trans_net$count,corr_trans_net$countlitter))
trans <- opq(bbox = chen_bd) %>%
add_osm_feature(key = 'highway', value = 'residential')%>%
osmdata_sf()
corr_net <- rstrt_net %>%
left_join(litter_no, by = "uniqueID")
print(chisq.test(corr_net$count,corr_net$countlitter))
vars_net_rstrt <- knnfishnet(fishnet,restrt_point,3)
vars_net_rstrt.long.nn <-
dplyr::select(vars_net_rstrt, ends_with(".nn")) %>%
gather(Variable, value, -geometry)
ggplot() +
geom_sf(data = vars_net_rstrt.long.nn, aes(fill=value), colour=NA) +
scale_fill_viridis(name="NN Distance") +
labs(title="Restaurant 3NN Distance") +
mapTheme()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(sf)
library(RSocrata)
library(viridis)
library(spatstat)
library(raster)
library(spdep)
library(FNN)
library(grid)
library(gridExtra)
library(knitr)
library(kableExtra)
library(tidycensus)
library(classInt)
library(RCurl)
library(httr)
library(osmdata)
library(randomForest)
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
st_c    <- st_coordinates
st_coid <- st_centroid
palette6 <- c("#264653","#2a9d8f",'#8AB17D',"#e9c46a",'#f4a261',"#e76f51")
palette5 <- c("#264653","#2a9d8f","#e9c46a",'#f4a261',"#e76f51")
palette4 <- c("#264653","#2a9d8f","#e9c46a","#e76f51")
palette2 <- c("#264653","#2a9d8f")
grid.arrange(
ggplot() +
geom_sf(data = chen_bdry) +
geom_sf(data = litter_p, colour="red", size=0.2, show.legend = "point") +
# geom_sf(data = litter_p%>%filter(username == 'Chandranram'), colour="green", size=0.2, show.legend = "point") +
mapTheme(title_size = 14),
nrow = 1
)
rest_net_temp.long.nn <-
dplyr::select(rest_net_temp, ends_with(".nn")) %>%
gather(Variable, value, -geometry)
tran_net_temp.long.nn <-
dplyr::select(tran_net_temp, ends_with(".nn")) %>%
gather(Variable, value, -geometry)
water_net_temp.long.nn <-
dplyr::select(water_net_temp, ends_with(".nn")) %>%
gather(Variable, value, -geometry)
grid.arrange(
ggplot() +
geom_sf(data = rest_net_temp.long.nn, aes(fill=value), colour=NA) +
scale_fill_viridis(name="NN Distance") +
labs(title="Restaurant NN Distance")+
mapTheme()+
theme(plot.title = element_text(size = 10, hjust = 0)),
ggplot() +
geom_sf(data = tran_net_temp.long.nn, aes(fill=value), colour=NA) +
scale_fill_viridis(name="NN Distance") +
labs(title="Road NN Distance") +
mapTheme()+
theme(plot.title = element_text(size = 10, hjust = 0)),
ggplot() +
geom_sf(data = water_net_temp.long.nn, aes(fill=value), colour=NA) +
scale_fill_viridis(name="NN Distance") +
labs(title="Water NN Distance") +
mapTheme()+
theme(plot.title = element_text(size = 10, hjust = 0)),
nrow = 1)
error_by_reg_and_fold <-
reg.ss.spatialCV %>%
group_by(uniqueID) %>%
summarize(Mean_Error = mean(Prediction - countlitter, na.rm = T),
MAE = mean(abs(Mean_Error), na.rm = T),
SD_MAE = mean(abs(Mean_Error), na.rm = T)) %>%
ungroup()
error_by_reg_and_fold %>%
arrange(desc(MAE))
error_by_reg_and_fold %>%
arrange(MAE)
error_by_reg_and_fold %>%
ggplot(aes(MAE)) +
geom_histogram(bins = 30, colour="black", fill = "#FDE725FF") +
scale_x_continuous(breaks = seq(0, 11, by = 1)) +
labs(title="Distribution of MAE", subtitle = "LOGO-CV",
x="Mean Absolute Error", y="Count")
